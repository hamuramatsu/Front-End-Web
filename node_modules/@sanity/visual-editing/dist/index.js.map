{"version":3,"file":"index.js","sources":["../src/ui/optimistic-state/useOptimistic.ts","../src/ui/shared-state/useSharedState.ts"],"sourcesContent":["import type {SanityDocument} from '@sanity/types'\nimport {startTransition, useEffect, useState} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {getPublishedId} from '../../util/documents'\nimport {isEmptyActor} from './context'\nimport {useOptimisticActor} from './useOptimisticActor'\n\nexport type OptimisticReducerAction<T> = {\n  document: T\n  id: string\n  originalId: string\n  type: 'appear' | 'mutate' | 'disappear'\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type OptimisticReducer<T, U> = (state: T, action: OptimisticReducerAction<U>) => T\n\nexport function useOptimistic<T, U = SanityDocument>(\n  passthrough: T,\n  reducer: OptimisticReducer<T, U> | Array<OptimisticReducer<T, U>>,\n): T {\n  const [pristine, setPristine] = useState(true)\n  const [optimistic, setOptimistic] = useState<T>(passthrough)\n  const [lastEvent, setLastEvent] = useState<OptimisticReducerAction<U> | null>(null)\n  const [lastPassthrough, setLastPassthrough] = useState<T>(passthrough)\n\n  const actor = useOptimisticActor()\n\n  /**\n   * This action is used in two `useEffect` hooks, it needs access to the provided `reducer`,\n   * but doesn't want to cause re-renders if `reducer` changes identity.\n   * The `useEffectEvent` hook ensures that the `reducer` value is never stale when used, and doesn't trigger setup and teardown of\n   * `useEffect` deps to make it happen.\n   */\n  const reduceStateFromAction = useEffectEvent(\n    (action: OptimisticReducerAction<U>, prevState: T) => {\n      const reducers = Array.isArray(reducer) ? reducer : [reducer]\n      return reducers.reduce(\n        (acc, reducer) =>\n          reducer(acc, {\n            document: action.document,\n            id: getPublishedId(action.id),\n            originalId: action.id,\n            type: action.type,\n          }),\n        prevState,\n      )\n    },\n  )\n\n  /**\n   * Records the last passthrough value when reducers ran in response to a rebased event.\n   * This allows us to later know when reducers should run should the passthrough change.\n   */\n  const updateLastPassthrough = useEffectEvent(() => setLastPassthrough(passthrough))\n\n  /**\n   * Handle rebase events, which runs the provided reducers,\n   * caches the event that was used to produce the new state,\n   * and marks the state as non-pristine.\n   */\n  useEffect(() => {\n    // If the actor hasn't been set yet, we don't need to subscribe to mutations\n    if (isEmptyActor(actor)) {\n      return\n    }\n\n    /**\n     * The pristine event fires much too soon, so the temporary workaround is that we greatly delay firing `setPristine(true)`,\n     * and instead relying on re-running reducers with the last event whenever the passthrough changes, to preserve the optimistic state,\n     * until we hopefully have eventual consistency on the passthrough.\n     */\n    let pristineTimeout: ReturnType<typeof setTimeout>\n\n    const rebasedSub = actor.on('rebased.local', (_event) => {\n      const event = {\n        // @todo You shall not cast\n        document: _event.document as U,\n        id: _event.id,\n        originalId: getPublishedId(_event.id),\n        // @todo This should eventually be emitted by the state machine\n        type: 'mutate' as const,\n      }\n      setOptimistic((prevState) => reduceStateFromAction(event, prevState))\n      setLastEvent(event)\n      updateLastPassthrough()\n      setPristine(false)\n\n      clearTimeout(pristineTimeout)\n    })\n    const pristineSub = actor.on('pristine', () => {\n      pristineTimeout = setTimeout(() => {\n        // Marking it in a startTransition allows react to interrupt the resulting render, should a new rebase happen and we're back to dirty\n        startTransition(() => setPristine(true))\n      }, 15000)\n    })\n    return () => {\n      rebasedSub.unsubscribe()\n      pristineSub.unsubscribe()\n    }\n  }, [actor, reduceStateFromAction, updateLastPassthrough])\n\n  /**\n   * If the passthrough changes, and we are in a dirty state, we rerun the reducers with the new passthrough but the previous event.\n   * Marking it in a transition allows react to interrupt this render should a new action happen, or should we be back in a pristine state.\n   */\n  useEffect(() => {\n    if (pristine) {\n      // if we are pristine, then we will passthrough anyway\n      return undefined\n    }\n    if (!lastEvent) {\n      // If we don't have a lastEvent when we are pristine, it's a fatal error\n      throw new Error('No last event found when syncing passthrough')\n    }\n    if (lastPassthrough === passthrough) {\n      // If the passthrough hasn't changed, then we don't need to rerun the reducers\n      return undefined\n    }\n\n    // Marking it in a startTransition allows react to interrupt the resulting render, should a new rebase happen\n    startTransition(() => {\n      setOptimistic(reduceStateFromAction(lastEvent, passthrough))\n      setLastPassthrough(passthrough)\n    })\n  }, [lastEvent, lastPassthrough, passthrough, pristine, reduceStateFromAction])\n\n  return pristine ? passthrough : optimistic\n}\n","import {useCallback, useContext, useSyncExternalStore} from 'react'\nimport {SharedStateContext} from './SharedStateContext'\n\nexport function useSharedState<\n  T extends boolean | null | number | object | string | undefined | unknown = unknown,\n>(key: string): T {\n  const context = useContext(SharedStateContext)\n  if (!context) {\n    throw new Error('useSharedState must be used within a SharedStateProvider')\n  }\n\n  const {store} = context\n\n  const value = useSyncExternalStore(\n    store.subscribe,\n    useCallback(() => store.getState()[key] as T, [key, store]),\n  )\n\n  return value\n}\n"],"names":["useOptimistic","passthrough","reducer","$","_c","pristine","setPristine","useState","optimistic","setOptimistic","lastEvent","setLastEvent","lastPassthrough","setLastPassthrough","actor","useOptimisticActor","t0","action","prevState","Array","isArray","reduce","acc","reducer_0","document","id","getPublishedId","originalId","type","reduceStateFromAction","useEffectEvent","t1","updateLastPassthrough","t2","t3","t4","t5","isEmptyActor","pristineTimeout","rebasedSub","on","_event","event","clearTimeout","pristineSub","unsubscribe","useEffect","Error","startTransition","useSharedState","key","context","useContext","SharedStateContext","store","getState","useSyncExternalStore","subscribe"],"mappings":"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"}