"use server";
"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var cache_js = require("next/cache.js"), headers_js = require("next/headers.js");
const perspectiveCookieName = "sanity-preview-perspective";
function sanitizePerspective(perspective, fallback) {
  switch (perspective) {
    case "previewDrafts":
    case "published":
      return perspective;
    default:
      return fallback;
  }
}
async function revalidateSyncTags(tags) {
  for (const _tag of tags) {
    const tag = `sanity:${_tag}`;
    await cache_js.revalidateTag(tag), console.log(`<SanityLive /> revalidated tag: ${tag}`);
  }
}
async function setPerspectiveCookie(perspective) {
  if (!(await headers_js.draftMode()).isEnabled)
    return;
  const sanitizedPerspective = sanitizePerspective(perspective, "previewDrafts");
  if (perspective !== sanitizedPerspective)
    throw new Error(`Invalid perspective: ${perspective}`);
  (await headers_js.cookies()).set(perspectiveCookieName, perspective, {
    httpOnly: !0,
    path: "/",
    secure: !0,
    sameSite: "none"
  });
}
exports.revalidateSyncTags = revalidateSyncTags;
exports.setPerspectiveCookie = setPerspectiveCookie;
//# sourceMappingURL=server-actions.cjs.map
